package j_details

// open class Worker(val name: String)

// class Programmer(name: String) : Worker(name)

// Theory
// Вариантность - сохранение совместимости присваивания исходных типов у производных типов.
// Исходные типы - это Worker и Programmer, а производные типы - это List<Worker> и List<Programmer>
// Инвариантность - отсутствие совместимости у производных типов. То, что мы не можем передать коллекцию
// подтипа туда, где принимается коллекция родительского типа следствием инвариантности.
// Ковариантность - наличие совместимости у производных типов. Чтобы была ковариантность, нужно
// указать ключевое слово out в производном типе
// В Котлин и Java изменяемые коллекции инвариативные, а неизменяемые ковариативные.
// Изменяемые коллекции таким образом защищены от такой ситуации:
// fun main() {
//    val list: MyMutableList<Programmer> = MyArrayList()
//    val list2: MyMutableList<Any> = list
//    list2.add("")
//    for (element in list) {  здесь компилятор считает, что имеет дело с Programmer
//        element.name // Здесь возникает ошибка времени выполнения
//    }
// }
